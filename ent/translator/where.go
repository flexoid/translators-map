// Code generated by ent, DO NOT EDIT.

package translator

import (
	"entgo.io/ent/dialect/sql"
	"github.com/flexoid/translators-map-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// Contacts applies equality check predicate on the "contacts" field. It's identical to ContactsEQ.
func Contacts(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContacts), v))
	})
}

// DetailsURL applies equality check predicate on the "details_url" field. It's identical to DetailsURLEQ.
func DetailsURL(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailsURL), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Translator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Translator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguage), v))
	})
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Translator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLanguage), v...))
	})
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Translator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLanguage), v...))
	})
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLanguage), v))
	})
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLanguage), v))
	})
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLanguage), v))
	})
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLanguage), v))
	})
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLanguage), v))
	})
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLanguage), v))
	})
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLanguage), v))
	})
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLanguage), v))
	})
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLanguage), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Translator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Translator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// ContactsEQ applies the EQ predicate on the "contacts" field.
func ContactsEQ(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContacts), v))
	})
}

// ContactsNEQ applies the NEQ predicate on the "contacts" field.
func ContactsNEQ(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContacts), v))
	})
}

// ContactsIn applies the In predicate on the "contacts" field.
func ContactsIn(vs ...string) predicate.Translator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContacts), v...))
	})
}

// ContactsNotIn applies the NotIn predicate on the "contacts" field.
func ContactsNotIn(vs ...string) predicate.Translator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContacts), v...))
	})
}

// ContactsGT applies the GT predicate on the "contacts" field.
func ContactsGT(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContacts), v))
	})
}

// ContactsGTE applies the GTE predicate on the "contacts" field.
func ContactsGTE(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContacts), v))
	})
}

// ContactsLT applies the LT predicate on the "contacts" field.
func ContactsLT(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContacts), v))
	})
}

// ContactsLTE applies the LTE predicate on the "contacts" field.
func ContactsLTE(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContacts), v))
	})
}

// ContactsContains applies the Contains predicate on the "contacts" field.
func ContactsContains(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContacts), v))
	})
}

// ContactsHasPrefix applies the HasPrefix predicate on the "contacts" field.
func ContactsHasPrefix(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContacts), v))
	})
}

// ContactsHasSuffix applies the HasSuffix predicate on the "contacts" field.
func ContactsHasSuffix(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContacts), v))
	})
}

// ContactsEqualFold applies the EqualFold predicate on the "contacts" field.
func ContactsEqualFold(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContacts), v))
	})
}

// ContactsContainsFold applies the ContainsFold predicate on the "contacts" field.
func ContactsContainsFold(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContacts), v))
	})
}

// DetailsURLEQ applies the EQ predicate on the "details_url" field.
func DetailsURLEQ(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLNEQ applies the NEQ predicate on the "details_url" field.
func DetailsURLNEQ(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLIn applies the In predicate on the "details_url" field.
func DetailsURLIn(vs ...string) predicate.Translator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDetailsURL), v...))
	})
}

// DetailsURLNotIn applies the NotIn predicate on the "details_url" field.
func DetailsURLNotIn(vs ...string) predicate.Translator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDetailsURL), v...))
	})
}

// DetailsURLGT applies the GT predicate on the "details_url" field.
func DetailsURLGT(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLGTE applies the GTE predicate on the "details_url" field.
func DetailsURLGTE(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLLT applies the LT predicate on the "details_url" field.
func DetailsURLLT(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLLTE applies the LTE predicate on the "details_url" field.
func DetailsURLLTE(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLContains applies the Contains predicate on the "details_url" field.
func DetailsURLContains(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLHasPrefix applies the HasPrefix predicate on the "details_url" field.
func DetailsURLHasPrefix(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLHasSuffix applies the HasSuffix predicate on the "details_url" field.
func DetailsURLHasSuffix(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLEqualFold applies the EqualFold predicate on the "details_url" field.
func DetailsURLEqualFold(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetailsURL), v))
	})
}

// DetailsURLContainsFold applies the ContainsFold predicate on the "details_url" field.
func DetailsURLContainsFold(v string) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetailsURL), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Translator) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Translator) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Translator) predicate.Translator {
	return predicate.Translator(func(s *sql.Selector) {
		p(s.Not())
	})
}
