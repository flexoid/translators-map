// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexoid/translators-map-go/ent/predicate"
	"github.com/flexoid/translators-map-go/ent/translator"
)

// TranslatorUpdate is the builder for updating Translator entities.
type TranslatorUpdate struct {
	config
	hooks    []Hook
	mutation *TranslatorMutation
}

// Where appends a list predicates to the TranslatorUpdate builder.
func (tu *TranslatorUpdate) Where(ps ...predicate.Translator) *TranslatorUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetNameSha sets the "name_sha" field.
func (tu *TranslatorUpdate) SetNameSha(b []byte) *TranslatorUpdate {
	tu.mutation.SetNameSha(b)
	return tu
}

// SetLanguage sets the "language" field.
func (tu *TranslatorUpdate) SetLanguage(s string) *TranslatorUpdate {
	tu.mutation.SetLanguage(s)
	return tu
}

// SetAddressSha sets the "address_sha" field.
func (tu *TranslatorUpdate) SetAddressSha(b []byte) *TranslatorUpdate {
	tu.mutation.SetAddressSha(b)
	return tu
}

// SetDetailsURL sets the "details_url" field.
func (tu *TranslatorUpdate) SetDetailsURL(s string) *TranslatorUpdate {
	tu.mutation.SetDetailsURL(s)
	return tu
}

// SetLatitude sets the "latitude" field.
func (tu *TranslatorUpdate) SetLatitude(f float64) *TranslatorUpdate {
	tu.mutation.ResetLatitude()
	tu.mutation.SetLatitude(f)
	return tu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (tu *TranslatorUpdate) SetNillableLatitude(f *float64) *TranslatorUpdate {
	if f != nil {
		tu.SetLatitude(*f)
	}
	return tu
}

// AddLatitude adds f to the "latitude" field.
func (tu *TranslatorUpdate) AddLatitude(f float64) *TranslatorUpdate {
	tu.mutation.AddLatitude(f)
	return tu
}

// ClearLatitude clears the value of the "latitude" field.
func (tu *TranslatorUpdate) ClearLatitude() *TranslatorUpdate {
	tu.mutation.ClearLatitude()
	return tu
}

// SetLongitude sets the "longitude" field.
func (tu *TranslatorUpdate) SetLongitude(f float64) *TranslatorUpdate {
	tu.mutation.ResetLongitude()
	tu.mutation.SetLongitude(f)
	return tu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (tu *TranslatorUpdate) SetNillableLongitude(f *float64) *TranslatorUpdate {
	if f != nil {
		tu.SetLongitude(*f)
	}
	return tu
}

// AddLongitude adds f to the "longitude" field.
func (tu *TranslatorUpdate) AddLongitude(f float64) *TranslatorUpdate {
	tu.mutation.AddLongitude(f)
	return tu
}

// ClearLongitude clears the value of the "longitude" field.
func (tu *TranslatorUpdate) ClearLongitude() *TranslatorUpdate {
	tu.mutation.ClearLongitude()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TranslatorUpdate) SetUpdatedAt(t time.Time) *TranslatorUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TranslatorUpdate) ClearUpdatedAt() *TranslatorUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// Mutation returns the TranslatorMutation object of the builder.
func (tu *TranslatorUpdate) Mutation() *TranslatorMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TranslatorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TranslatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TranslatorUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TranslatorUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TranslatorUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TranslatorUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := translator.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TranslatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   translator.Table,
			Columns: translator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: translator.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.NameSha(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: translator.FieldNameSha,
		})
	}
	if value, ok := tu.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: translator.FieldLanguage,
		})
	}
	if value, ok := tu.mutation.AddressSha(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: translator.FieldAddressSha,
		})
	}
	if value, ok := tu.mutation.DetailsURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: translator.FieldDetailsURL,
		})
	}
	if value, ok := tu.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: translator.FieldLatitude,
		})
	}
	if value, ok := tu.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: translator.FieldLatitude,
		})
	}
	if tu.mutation.LatitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: translator.FieldLatitude,
		})
	}
	if value, ok := tu.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: translator.FieldLongitude,
		})
	}
	if value, ok := tu.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: translator.FieldLongitude,
		})
	}
	if tu.mutation.LongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: translator.FieldLongitude,
		})
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: translator.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: translator.FieldUpdatedAt,
		})
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: translator.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{translator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TranslatorUpdateOne is the builder for updating a single Translator entity.
type TranslatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TranslatorMutation
}

// SetNameSha sets the "name_sha" field.
func (tuo *TranslatorUpdateOne) SetNameSha(b []byte) *TranslatorUpdateOne {
	tuo.mutation.SetNameSha(b)
	return tuo
}

// SetLanguage sets the "language" field.
func (tuo *TranslatorUpdateOne) SetLanguage(s string) *TranslatorUpdateOne {
	tuo.mutation.SetLanguage(s)
	return tuo
}

// SetAddressSha sets the "address_sha" field.
func (tuo *TranslatorUpdateOne) SetAddressSha(b []byte) *TranslatorUpdateOne {
	tuo.mutation.SetAddressSha(b)
	return tuo
}

// SetDetailsURL sets the "details_url" field.
func (tuo *TranslatorUpdateOne) SetDetailsURL(s string) *TranslatorUpdateOne {
	tuo.mutation.SetDetailsURL(s)
	return tuo
}

// SetLatitude sets the "latitude" field.
func (tuo *TranslatorUpdateOne) SetLatitude(f float64) *TranslatorUpdateOne {
	tuo.mutation.ResetLatitude()
	tuo.mutation.SetLatitude(f)
	return tuo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (tuo *TranslatorUpdateOne) SetNillableLatitude(f *float64) *TranslatorUpdateOne {
	if f != nil {
		tuo.SetLatitude(*f)
	}
	return tuo
}

// AddLatitude adds f to the "latitude" field.
func (tuo *TranslatorUpdateOne) AddLatitude(f float64) *TranslatorUpdateOne {
	tuo.mutation.AddLatitude(f)
	return tuo
}

// ClearLatitude clears the value of the "latitude" field.
func (tuo *TranslatorUpdateOne) ClearLatitude() *TranslatorUpdateOne {
	tuo.mutation.ClearLatitude()
	return tuo
}

// SetLongitude sets the "longitude" field.
func (tuo *TranslatorUpdateOne) SetLongitude(f float64) *TranslatorUpdateOne {
	tuo.mutation.ResetLongitude()
	tuo.mutation.SetLongitude(f)
	return tuo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (tuo *TranslatorUpdateOne) SetNillableLongitude(f *float64) *TranslatorUpdateOne {
	if f != nil {
		tuo.SetLongitude(*f)
	}
	return tuo
}

// AddLongitude adds f to the "longitude" field.
func (tuo *TranslatorUpdateOne) AddLongitude(f float64) *TranslatorUpdateOne {
	tuo.mutation.AddLongitude(f)
	return tuo
}

// ClearLongitude clears the value of the "longitude" field.
func (tuo *TranslatorUpdateOne) ClearLongitude() *TranslatorUpdateOne {
	tuo.mutation.ClearLongitude()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TranslatorUpdateOne) SetUpdatedAt(t time.Time) *TranslatorUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TranslatorUpdateOne) ClearUpdatedAt() *TranslatorUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// Mutation returns the TranslatorMutation object of the builder.
func (tuo *TranslatorUpdateOne) Mutation() *TranslatorMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TranslatorUpdateOne) Select(field string, fields ...string) *TranslatorUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Translator entity.
func (tuo *TranslatorUpdateOne) Save(ctx context.Context) (*Translator, error) {
	var (
		err  error
		node *Translator
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TranslatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Translator)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TranslatorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TranslatorUpdateOne) SaveX(ctx context.Context) *Translator {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TranslatorUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TranslatorUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TranslatorUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := translator.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TranslatorUpdateOne) sqlSave(ctx context.Context) (_node *Translator, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   translator.Table,
			Columns: translator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: translator.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Translator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, translator.FieldID)
		for _, f := range fields {
			if !translator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != translator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.NameSha(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: translator.FieldNameSha,
		})
	}
	if value, ok := tuo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: translator.FieldLanguage,
		})
	}
	if value, ok := tuo.mutation.AddressSha(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: translator.FieldAddressSha,
		})
	}
	if value, ok := tuo.mutation.DetailsURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: translator.FieldDetailsURL,
		})
	}
	if value, ok := tuo.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: translator.FieldLatitude,
		})
	}
	if value, ok := tuo.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: translator.FieldLatitude,
		})
	}
	if tuo.mutation.LatitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: translator.FieldLatitude,
		})
	}
	if value, ok := tuo.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: translator.FieldLongitude,
		})
	}
	if value, ok := tuo.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: translator.FieldLongitude,
		})
	}
	if tuo.mutation.LongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: translator.FieldLongitude,
		})
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: translator.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: translator.FieldUpdatedAt,
		})
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: translator.FieldUpdatedAt,
		})
	}
	_node = &Translator{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{translator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
