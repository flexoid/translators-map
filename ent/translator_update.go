// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexoid/translators-map-go/ent/predicate"
	"github.com/flexoid/translators-map-go/ent/translator"
)

// TranslatorUpdate is the builder for updating Translator entities.
type TranslatorUpdate struct {
	config
	hooks    []Hook
	mutation *TranslatorMutation
}

// Where appends a list predicates to the TranslatorUpdate builder.
func (tu *TranslatorUpdate) Where(ps ...predicate.Translator) *TranslatorUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetExternalID sets the "external_id" field.
func (tu *TranslatorUpdate) SetExternalID(i int) *TranslatorUpdate {
	tu.mutation.ResetExternalID()
	tu.mutation.SetExternalID(i)
	return tu
}

// AddExternalID adds i to the "external_id" field.
func (tu *TranslatorUpdate) AddExternalID(i int) *TranslatorUpdate {
	tu.mutation.AddExternalID(i)
	return tu
}

// SetName sets the "name" field.
func (tu *TranslatorUpdate) SetName(s string) *TranslatorUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TranslatorUpdate) SetNillableName(s *string) *TranslatorUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TranslatorUpdate) ClearName() *TranslatorUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetLanguage sets the "language" field.
func (tu *TranslatorUpdate) SetLanguage(s string) *TranslatorUpdate {
	tu.mutation.SetLanguage(s)
	return tu
}

// SetAddress sets the "address" field.
func (tu *TranslatorUpdate) SetAddress(s string) *TranslatorUpdate {
	tu.mutation.SetAddress(s)
	return tu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tu *TranslatorUpdate) SetNillableAddress(s *string) *TranslatorUpdate {
	if s != nil {
		tu.SetAddress(*s)
	}
	return tu
}

// ClearAddress clears the value of the "address" field.
func (tu *TranslatorUpdate) ClearAddress() *TranslatorUpdate {
	tu.mutation.ClearAddress()
	return tu
}

// SetAddressSha sets the "address_sha" field.
func (tu *TranslatorUpdate) SetAddressSha(b []byte) *TranslatorUpdate {
	tu.mutation.SetAddressSha(b)
	return tu
}

// SetCity sets the "city" field.
func (tu *TranslatorUpdate) SetCity(s string) *TranslatorUpdate {
	tu.mutation.SetCity(s)
	return tu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (tu *TranslatorUpdate) SetNillableCity(s *string) *TranslatorUpdate {
	if s != nil {
		tu.SetCity(*s)
	}
	return tu
}

// ClearCity clears the value of the "city" field.
func (tu *TranslatorUpdate) ClearCity() *TranslatorUpdate {
	tu.mutation.ClearCity()
	return tu
}

// SetAdministrativeArea sets the "administrative_area" field.
func (tu *TranslatorUpdate) SetAdministrativeArea(s string) *TranslatorUpdate {
	tu.mutation.SetAdministrativeArea(s)
	return tu
}

// SetNillableAdministrativeArea sets the "administrative_area" field if the given value is not nil.
func (tu *TranslatorUpdate) SetNillableAdministrativeArea(s *string) *TranslatorUpdate {
	if s != nil {
		tu.SetAdministrativeArea(*s)
	}
	return tu
}

// ClearAdministrativeArea clears the value of the "administrative_area" field.
func (tu *TranslatorUpdate) ClearAdministrativeArea() *TranslatorUpdate {
	tu.mutation.ClearAdministrativeArea()
	return tu
}

// SetCountry sets the "country" field.
func (tu *TranslatorUpdate) SetCountry(s string) *TranslatorUpdate {
	tu.mutation.SetCountry(s)
	return tu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (tu *TranslatorUpdate) SetNillableCountry(s *string) *TranslatorUpdate {
	if s != nil {
		tu.SetCountry(*s)
	}
	return tu
}

// ClearCountry clears the value of the "country" field.
func (tu *TranslatorUpdate) ClearCountry() *TranslatorUpdate {
	tu.mutation.ClearCountry()
	return tu
}

// SetDetailsURL sets the "details_url" field.
func (tu *TranslatorUpdate) SetDetailsURL(s string) *TranslatorUpdate {
	tu.mutation.SetDetailsURL(s)
	return tu
}

// SetLatitude sets the "latitude" field.
func (tu *TranslatorUpdate) SetLatitude(f float64) *TranslatorUpdate {
	tu.mutation.ResetLatitude()
	tu.mutation.SetLatitude(f)
	return tu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (tu *TranslatorUpdate) SetNillableLatitude(f *float64) *TranslatorUpdate {
	if f != nil {
		tu.SetLatitude(*f)
	}
	return tu
}

// AddLatitude adds f to the "latitude" field.
func (tu *TranslatorUpdate) AddLatitude(f float64) *TranslatorUpdate {
	tu.mutation.AddLatitude(f)
	return tu
}

// ClearLatitude clears the value of the "latitude" field.
func (tu *TranslatorUpdate) ClearLatitude() *TranslatorUpdate {
	tu.mutation.ClearLatitude()
	return tu
}

// SetLongitude sets the "longitude" field.
func (tu *TranslatorUpdate) SetLongitude(f float64) *TranslatorUpdate {
	tu.mutation.ResetLongitude()
	tu.mutation.SetLongitude(f)
	return tu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (tu *TranslatorUpdate) SetNillableLongitude(f *float64) *TranslatorUpdate {
	if f != nil {
		tu.SetLongitude(*f)
	}
	return tu
}

// AddLongitude adds f to the "longitude" field.
func (tu *TranslatorUpdate) AddLongitude(f float64) *TranslatorUpdate {
	tu.mutation.AddLongitude(f)
	return tu
}

// ClearLongitude clears the value of the "longitude" field.
func (tu *TranslatorUpdate) ClearLongitude() *TranslatorUpdate {
	tu.mutation.ClearLongitude()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TranslatorUpdate) SetUpdatedAt(t time.Time) *TranslatorUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TranslatorUpdate) ClearUpdatedAt() *TranslatorUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// Mutation returns the TranslatorMutation object of the builder.
func (tu *TranslatorUpdate) Mutation() *TranslatorMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TranslatorUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TranslatorUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TranslatorUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TranslatorUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TranslatorUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := translator.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TranslatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(translator.Table, translator.Columns, sqlgraph.NewFieldSpec(translator.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.ExternalID(); ok {
		_spec.SetField(translator.FieldExternalID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedExternalID(); ok {
		_spec.AddField(translator.FieldExternalID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(translator.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(translator.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.Language(); ok {
		_spec.SetField(translator.FieldLanguage, field.TypeString, value)
	}
	if value, ok := tu.mutation.Address(); ok {
		_spec.SetField(translator.FieldAddress, field.TypeString, value)
	}
	if tu.mutation.AddressCleared() {
		_spec.ClearField(translator.FieldAddress, field.TypeString)
	}
	if value, ok := tu.mutation.AddressSha(); ok {
		_spec.SetField(translator.FieldAddressSha, field.TypeBytes, value)
	}
	if value, ok := tu.mutation.City(); ok {
		_spec.SetField(translator.FieldCity, field.TypeString, value)
	}
	if tu.mutation.CityCleared() {
		_spec.ClearField(translator.FieldCity, field.TypeString)
	}
	if value, ok := tu.mutation.AdministrativeArea(); ok {
		_spec.SetField(translator.FieldAdministrativeArea, field.TypeString, value)
	}
	if tu.mutation.AdministrativeAreaCleared() {
		_spec.ClearField(translator.FieldAdministrativeArea, field.TypeString)
	}
	if value, ok := tu.mutation.Country(); ok {
		_spec.SetField(translator.FieldCountry, field.TypeString, value)
	}
	if tu.mutation.CountryCleared() {
		_spec.ClearField(translator.FieldCountry, field.TypeString)
	}
	if value, ok := tu.mutation.DetailsURL(); ok {
		_spec.SetField(translator.FieldDetailsURL, field.TypeString, value)
	}
	if value, ok := tu.mutation.Latitude(); ok {
		_spec.SetField(translator.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedLatitude(); ok {
		_spec.AddField(translator.FieldLatitude, field.TypeFloat64, value)
	}
	if tu.mutation.LatitudeCleared() {
		_spec.ClearField(translator.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := tu.mutation.Longitude(); ok {
		_spec.SetField(translator.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedLongitude(); ok {
		_spec.AddField(translator.FieldLongitude, field.TypeFloat64, value)
	}
	if tu.mutation.LongitudeCleared() {
		_spec.ClearField(translator.FieldLongitude, field.TypeFloat64)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(translator.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(translator.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(translator.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{translator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TranslatorUpdateOne is the builder for updating a single Translator entity.
type TranslatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TranslatorMutation
}

// SetExternalID sets the "external_id" field.
func (tuo *TranslatorUpdateOne) SetExternalID(i int) *TranslatorUpdateOne {
	tuo.mutation.ResetExternalID()
	tuo.mutation.SetExternalID(i)
	return tuo
}

// AddExternalID adds i to the "external_id" field.
func (tuo *TranslatorUpdateOne) AddExternalID(i int) *TranslatorUpdateOne {
	tuo.mutation.AddExternalID(i)
	return tuo
}

// SetName sets the "name" field.
func (tuo *TranslatorUpdateOne) SetName(s string) *TranslatorUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TranslatorUpdateOne) SetNillableName(s *string) *TranslatorUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TranslatorUpdateOne) ClearName() *TranslatorUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetLanguage sets the "language" field.
func (tuo *TranslatorUpdateOne) SetLanguage(s string) *TranslatorUpdateOne {
	tuo.mutation.SetLanguage(s)
	return tuo
}

// SetAddress sets the "address" field.
func (tuo *TranslatorUpdateOne) SetAddress(s string) *TranslatorUpdateOne {
	tuo.mutation.SetAddress(s)
	return tuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tuo *TranslatorUpdateOne) SetNillableAddress(s *string) *TranslatorUpdateOne {
	if s != nil {
		tuo.SetAddress(*s)
	}
	return tuo
}

// ClearAddress clears the value of the "address" field.
func (tuo *TranslatorUpdateOne) ClearAddress() *TranslatorUpdateOne {
	tuo.mutation.ClearAddress()
	return tuo
}

// SetAddressSha sets the "address_sha" field.
func (tuo *TranslatorUpdateOne) SetAddressSha(b []byte) *TranslatorUpdateOne {
	tuo.mutation.SetAddressSha(b)
	return tuo
}

// SetCity sets the "city" field.
func (tuo *TranslatorUpdateOne) SetCity(s string) *TranslatorUpdateOne {
	tuo.mutation.SetCity(s)
	return tuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (tuo *TranslatorUpdateOne) SetNillableCity(s *string) *TranslatorUpdateOne {
	if s != nil {
		tuo.SetCity(*s)
	}
	return tuo
}

// ClearCity clears the value of the "city" field.
func (tuo *TranslatorUpdateOne) ClearCity() *TranslatorUpdateOne {
	tuo.mutation.ClearCity()
	return tuo
}

// SetAdministrativeArea sets the "administrative_area" field.
func (tuo *TranslatorUpdateOne) SetAdministrativeArea(s string) *TranslatorUpdateOne {
	tuo.mutation.SetAdministrativeArea(s)
	return tuo
}

// SetNillableAdministrativeArea sets the "administrative_area" field if the given value is not nil.
func (tuo *TranslatorUpdateOne) SetNillableAdministrativeArea(s *string) *TranslatorUpdateOne {
	if s != nil {
		tuo.SetAdministrativeArea(*s)
	}
	return tuo
}

// ClearAdministrativeArea clears the value of the "administrative_area" field.
func (tuo *TranslatorUpdateOne) ClearAdministrativeArea() *TranslatorUpdateOne {
	tuo.mutation.ClearAdministrativeArea()
	return tuo
}

// SetCountry sets the "country" field.
func (tuo *TranslatorUpdateOne) SetCountry(s string) *TranslatorUpdateOne {
	tuo.mutation.SetCountry(s)
	return tuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (tuo *TranslatorUpdateOne) SetNillableCountry(s *string) *TranslatorUpdateOne {
	if s != nil {
		tuo.SetCountry(*s)
	}
	return tuo
}

// ClearCountry clears the value of the "country" field.
func (tuo *TranslatorUpdateOne) ClearCountry() *TranslatorUpdateOne {
	tuo.mutation.ClearCountry()
	return tuo
}

// SetDetailsURL sets the "details_url" field.
func (tuo *TranslatorUpdateOne) SetDetailsURL(s string) *TranslatorUpdateOne {
	tuo.mutation.SetDetailsURL(s)
	return tuo
}

// SetLatitude sets the "latitude" field.
func (tuo *TranslatorUpdateOne) SetLatitude(f float64) *TranslatorUpdateOne {
	tuo.mutation.ResetLatitude()
	tuo.mutation.SetLatitude(f)
	return tuo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (tuo *TranslatorUpdateOne) SetNillableLatitude(f *float64) *TranslatorUpdateOne {
	if f != nil {
		tuo.SetLatitude(*f)
	}
	return tuo
}

// AddLatitude adds f to the "latitude" field.
func (tuo *TranslatorUpdateOne) AddLatitude(f float64) *TranslatorUpdateOne {
	tuo.mutation.AddLatitude(f)
	return tuo
}

// ClearLatitude clears the value of the "latitude" field.
func (tuo *TranslatorUpdateOne) ClearLatitude() *TranslatorUpdateOne {
	tuo.mutation.ClearLatitude()
	return tuo
}

// SetLongitude sets the "longitude" field.
func (tuo *TranslatorUpdateOne) SetLongitude(f float64) *TranslatorUpdateOne {
	tuo.mutation.ResetLongitude()
	tuo.mutation.SetLongitude(f)
	return tuo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (tuo *TranslatorUpdateOne) SetNillableLongitude(f *float64) *TranslatorUpdateOne {
	if f != nil {
		tuo.SetLongitude(*f)
	}
	return tuo
}

// AddLongitude adds f to the "longitude" field.
func (tuo *TranslatorUpdateOne) AddLongitude(f float64) *TranslatorUpdateOne {
	tuo.mutation.AddLongitude(f)
	return tuo
}

// ClearLongitude clears the value of the "longitude" field.
func (tuo *TranslatorUpdateOne) ClearLongitude() *TranslatorUpdateOne {
	tuo.mutation.ClearLongitude()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TranslatorUpdateOne) SetUpdatedAt(t time.Time) *TranslatorUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TranslatorUpdateOne) ClearUpdatedAt() *TranslatorUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// Mutation returns the TranslatorMutation object of the builder.
func (tuo *TranslatorUpdateOne) Mutation() *TranslatorMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TranslatorUpdate builder.
func (tuo *TranslatorUpdateOne) Where(ps ...predicate.Translator) *TranslatorUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TranslatorUpdateOne) Select(field string, fields ...string) *TranslatorUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Translator entity.
func (tuo *TranslatorUpdateOne) Save(ctx context.Context) (*Translator, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TranslatorUpdateOne) SaveX(ctx context.Context) *Translator {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TranslatorUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TranslatorUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TranslatorUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := translator.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TranslatorUpdateOne) sqlSave(ctx context.Context) (_node *Translator, err error) {
	_spec := sqlgraph.NewUpdateSpec(translator.Table, translator.Columns, sqlgraph.NewFieldSpec(translator.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Translator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, translator.FieldID)
		for _, f := range fields {
			if !translator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != translator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.ExternalID(); ok {
		_spec.SetField(translator.FieldExternalID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedExternalID(); ok {
		_spec.AddField(translator.FieldExternalID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(translator.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(translator.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.Language(); ok {
		_spec.SetField(translator.FieldLanguage, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Address(); ok {
		_spec.SetField(translator.FieldAddress, field.TypeString, value)
	}
	if tuo.mutation.AddressCleared() {
		_spec.ClearField(translator.FieldAddress, field.TypeString)
	}
	if value, ok := tuo.mutation.AddressSha(); ok {
		_spec.SetField(translator.FieldAddressSha, field.TypeBytes, value)
	}
	if value, ok := tuo.mutation.City(); ok {
		_spec.SetField(translator.FieldCity, field.TypeString, value)
	}
	if tuo.mutation.CityCleared() {
		_spec.ClearField(translator.FieldCity, field.TypeString)
	}
	if value, ok := tuo.mutation.AdministrativeArea(); ok {
		_spec.SetField(translator.FieldAdministrativeArea, field.TypeString, value)
	}
	if tuo.mutation.AdministrativeAreaCleared() {
		_spec.ClearField(translator.FieldAdministrativeArea, field.TypeString)
	}
	if value, ok := tuo.mutation.Country(); ok {
		_spec.SetField(translator.FieldCountry, field.TypeString, value)
	}
	if tuo.mutation.CountryCleared() {
		_spec.ClearField(translator.FieldCountry, field.TypeString)
	}
	if value, ok := tuo.mutation.DetailsURL(); ok {
		_spec.SetField(translator.FieldDetailsURL, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Latitude(); ok {
		_spec.SetField(translator.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedLatitude(); ok {
		_spec.AddField(translator.FieldLatitude, field.TypeFloat64, value)
	}
	if tuo.mutation.LatitudeCleared() {
		_spec.ClearField(translator.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := tuo.mutation.Longitude(); ok {
		_spec.SetField(translator.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedLongitude(); ok {
		_spec.AddField(translator.FieldLongitude, field.TypeFloat64, value)
	}
	if tuo.mutation.LongitudeCleared() {
		_spec.ClearField(translator.FieldLongitude, field.TypeFloat64)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(translator.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(translator.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(translator.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Translator{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{translator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
